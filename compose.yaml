
name: books-api

services:
  server:
    container_name: books-server
    build:
      context: ./server
    environment:
      NODE_ENV: production   # npm will not install dev-Dependencies
      DATABASE_URI: "mongodb://database:27017"
#    command: ["npm", "run", "dev"]    # this line is use for development inside the container (nodemon restarting the server after changes) MUST BE DELETED FOR PRODUCTION!!!
#    volumes:                          # this line is use for development inside the container MUST BE DELETED FOR PRODUCTION!!!
#      - ./server:/usr/src/app         # a direct mapping of the src code, it's not a copy!!!, (modifying the files on the host -> modifying the file inside the container)
    ports:
      - "3000:3000"
    networks:
      - books-net
    depends_on:
      - database


  database:
    container_name: books-database
    image: mongo:latest
    volumes:
      - ./database/data:/data/db                                                        # persist the database data, more info at https://hub.docker.com/_/mongo (Where to Store Data)
      - ./database/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro   # map the script to initialize mongodb with read-only permission
                                                                                        # more info at https://hub.docker.com/_/mongo (Initializing a fresh instance)
    ports:
      - "27017:27017"
    networks:
      - books-net


networks:
  books-net:



# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

